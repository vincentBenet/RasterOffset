# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RasterOffset
                                 A QGIS plugin
 A plugin to offset X and Y of a raster
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by SkipperNDT
        email                : v.benet@skipperndt.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
import numpy
from qgis.core import (
    Qgis,
    QgsProject,
    QgsPathResolver,
    QgsRasterLayer,
    QgsRasterFileWriter
)

from qgis.gui import (
    QgsLayerTreeMapCanvasBridge,
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .RasterOffset_dialog import RasterOffsetDialog
import os.path


class RasterOffset:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RasterOffset_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&RasterOffset')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RasterOffset', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/RasterOffset/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&RasterOffset'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RasterOffsetDialog()

        # show the dialog
        self.dlg.comboBox_raster.clear()
        layers = QgsProject.instance().mapLayers()
        for layer_key, layer in layers.items():
            if not isinstance(QgsProject.instance().mapLayers()[layer_key], QgsRasterLayer):
                continue
            if not os.path.isfile(str(layer.source())):
                continue
            self.dlg.comboBox_raster.addItem(layer_key)
        self.dlg.pushButton_outputpath.clicked.connect(lambda: self.dlg.lineEdit_pathOutput.setText(QFileDialog.getSaveFileName(filter='*.tif')[0]))
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            layer_input = self.dlg.comboBox_raster.currentText()
            layer_obj = layers[layer_input]
            path_input = layer_obj.source()
            offset_x = self.dlg.doubleSpinBox_offset_x.value()
            offset_y = self.dlg.doubleSpinBox_offset_y.value()
            path_output = self.dlg.lineEdit_pathOutput.text()
            
            # if not os.path.isdir(os.path.dirname(path_output)):
                # raise Exception("Not valid directory path output")
            # if not path_output.endswith(".tif"):
                # raise Exception("Not valid extension path output")
            self.do(layer_obj, path_output, offset_x, offset_y)

    def do(self, layer, path_output, offset_x, offset_y):
        provider = layer.dataProvider()
        extent = layer.extent()    
        crs = layer.crs()
        nb_bands = layer.bandCount()
        bands_values = []
        for band_num in range(1, nb_bands+1):
            rows = layer.height()
            cols = layer.width()
            block = layer.dataProvider().block(band_num, layer.extent(), cols, rows)
            band_value = numpy.array([[block.value(i, j) for j in range(cols)] for i in range(rows)])
            bands_values.append(band_value)
        x_nb, y_nb = numpy.shape(bands_values[0])
        x_values = numpy.linspace(extent.xMinimum(), extent.xMaximum(), x_nb) + offset_x
        y_values = numpy.linspace(extent.yMinimum(), extent.yMaximum(), y_nb) + offset_y
        crs = layer.crs()
        nb_bands = len(bands_values)
        writer = QgsRasterFileWriter(path_output)
        provider = QgsRasterFileWriter.createMultiBandRaster(
            writer,
            dataType={"float32": Qgis.Float32, "float64": Qgis.Float64,}[bands_values[0].dtype.name],
            width=x_values.size,
            height=y_values.size,
            extent=extent,
            crs=crs,
            nBands=nb_bands
        )
        provider.setEditable(True)
        for band_num in range(1, nb_bands+1):
            provider.setNoDataValue(band_number, -1)
            block = provider.block(
                bandNo=band_num,
                boundingBox=provider.extent(),
                width=provider.xSize(),
                height=provider.ySize(),
            )
            block.setData(bands_values[band_num-1].tobytes())
            provider.writeBlock(
                block=block,
                band=band_num,
            )
        provider.setEditable(False)
